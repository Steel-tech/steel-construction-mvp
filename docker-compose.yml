version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend-builder
    container_name: steel-backend
    restart: unless-stopped
    ports:
      - "5001:5001"
    environment:
      - NODE_ENV=production
      - PORT=5001
      - JWT_SECRET=${JWT_SECRET}
      - DATABASE_PATH=/app/database/steel_construction.db
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:5173}
    volumes:
      - ./database:/app/database
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./backend:/app/backend
    networks:
      - steel-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s
    depends_on:
      - database-init

  # Frontend Service (for development)
  frontend:
    image: node:18-alpine
    container_name: steel-frontend
    working_dir: /app
    command: npm run dev -- --host
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost:5001/api/v1
      - VITE_SUPABASE_URL=${VITE_SUPABASE_URL}
      - VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY}
    volumes:
      - ./frontend:/app
    networks:
      - steel-network
    depends_on:
      - backend

  # Nginx Web Server (for production)
  nginx:
    image: nginx:alpine
    container_name: steel-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/dist:/usr/share/nginx/html:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - steel-network
    depends_on:
      - backend
    profiles:
      - production

  # Database initialization service
  database-init:
    image: alpine:latest
    container_name: steel-db-init
    command: /bin/sh -c "mkdir -p /app/database && touch /app/database/steel_construction.db && echo 'Database initialized'"
    volumes:
      - ./database:/app/database
    networks:
      - steel-network

  # Redis Cache (optional, for session management)
  redis:
    image: redis:alpine
    container_name: steel-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - steel-network
    profiles:
      - production

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: steel-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - steel-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: steel-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    networks:
      - steel-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

networks:
  steel-network:
    driver: bridge

volumes:
  redis-data:
  prometheus-data:
  grafana-data: